DATA:           <data> defined map data
tilesize:       set the size of ground images
showcollisions: set if collisions can be che seen visually ("true" or "false")
camdistance:    set camera distance from playable character
onLoad:         apicall that defines a script to be called right after map is loaded
onUnload:       apicall that defines a script to be called right before the map is changed
bgImage:        resource url to image to be places as background

    ROW:        <row> starts a grid row
    
        TILE    <tile> : creates a single tile
        walkable:       set the tile walkable or not
        
            GROUND:             <ground />  represents a ground object, every new ground in the same tile will overwrite previous ground image.
                                            if alpha channel is present, colors will be merged.
            url:                url of resource
            walkable:           set if ground can be walkable ("true", "false" or "collide", default: true) collide let the tile be walked but reacts to onWalked
            
            
            CHARACTER           <character /> represents a character playable in the game or an NPC
                
                PROPERTIES:
                id:                 unique identification string
                url:                url of resource
                inclination:        inclination of character
                scale:              scale character
                playable:           defines if character is playable or not in an exact moment
                hitboxscale:        defines the character collision
                direction:          can be "left" "right" "top" "down"
            
            
            
            OBJECT:             <object /> normal object in world, has collisions
                id:                 unique identification string
                url:                url of the resource found by the resourcemanager
                walkable:           set if object can be walkable ("true" or "false", default: false)
                inclination:        inclination of object
                offsetwidth:        used to stretch collisions in 3d mode horizontally
                offsetheight:       used to stretch collisions in 3d mode vertically
                elevation:          set manually elevation of object
                scale:              scale objects
                offsethorizontal:   place object horizontally pixel perfect
                offsetvertical:     place object vertically pixel perfect
                offsetcollisionh:   place collision solid horizontally pixel perfect
                offsetcollisionv:   place collision solid vertically pixel perfect
                collisionmode:      can be "3d" that let character go behind an object or "2d" for completely collide all image with very low inclination degrees
                avoidable:          can be "true" or "false" (default: "false"). Mark an object as intelligently avoidable when hitting just the corner
            
            LIGHT:              <light />
                id:                 unique id
                on:                 if light is on by default
                distance:           height from tile position
                color:              color expressed by an RGB string like "255,255,166"
                attenuation:        quadratic value at which light power decreases. Use very small values like 0.1, 0.05 or 0.2
                type:               type of light used. can be "point" or "spot"
            
            GRASS:              <grass /> special grass object
            
Events API:
            onWalked:           used to create the change Map events, must give the Map Name and the character position
                                "messenger.send('changeMap', ['MapName.map','PositionX,PositionY'])"
            onPicked:           used to trigger things that are close to the main character and the player press action button
                                (default: spacebar)
                                
Scripting API:

-----GENERAL SYNTAX

            ###pause
                requests a game engine pause to execute things like baloons and music etc.

-----GUI
            fadingtext.spawn(text <x,z,scale,r,g,b>)
                spawn a text that will fade in 9 seconds

-----BROADCAST EVENTS
            messenger.send('changeMap', ['corridoio.map','3,1','up','flyall'])"
                request a changemap with ['MapName.map','PositionX,PositionY','directionofplayer','animation']
            possible animation types:
                - 'none'    : default animation type involving no animation at all [DONE]
                - 'flyall'  : all objects are going to fly up in the space leaving only ground that fades and reloads as map changes [WIP]

-----SELECTORS
            pGrid.getObjectById(id)
                where id is a string. In case of multiple occurences, the first is returned
            pGrid.getObjectsById(id)
                where id is a string. Return a list of occurences. In case of single occurence, a list with one element is returned

-----BALOONS

            baloons.push(speaker, text, id, speed)
				shows a baloon with a message. Can feature speaker tag and animation speed.
				speaker             that will say those words
				text                message to be shown
				id                  unique identification string
				speed               animation speed at which the message will be shown
            baloons.pushThought(speaker, text, id, speed)
                same....

-----CHARACTERS
            character.npc_push_walk(direction, unit)
                "up", "down", "left", "right", and units in integer as a tile
            character.setSpeed(2.0)
                set movement speed for character
            character.face(direction)
                set face to direction
            character.setCinematic(True|False)
                while cinematic mode is True, Character is flagged as playable but won't be allowing for longer cinematics

-----LIGHTS
            lamp.toggle()
                realtime toggle
            lamp.setOn()
                realtime setting on
            lamp.setOff()
                realtime setting off

-----AUDIO

            audioManager.playMusic(resource_path, s)
                plays background music in loop. Only one can be played at a time, fading in s seconds
            
            audioManager.stopMusic(time)
                stop background music smoothing with given time
            
            audioManager.playEffect(resource_path)
                plays small sound effect without loop
            
            audioManager.playLongEffect(name, resource_path)
                plays long sound effect on background (like rain or birds)
            
            audioManager.stopLongEffect(name)
                stops and delete long effect based on name
            
            audioManager.clearAllEffects()
                auto called when changing map, clears all long effects playing
            
------PERSISTENCE
            
            persistence.save(key, value)
                save a variable named <key> with <value> cross levels
            persistence.load(key)
                get a variable value with <key>
            persistence.del(key)
                delete a variable with <key>
	    

SNIPPETS:
baloons.push('Chiara', 'Ehi! Non toccare la mia pianta!', 'chiara')
audioManager.playLongEffect('rain', 'sfx/rain_indoor.ogg')
lamp = pGrid.getObjectById("lamp1")
if persistence.load("cameraState") == 1:
persistence.save("cameraState", 1)
chiara.npc_push_walk("right", 1)
	    
